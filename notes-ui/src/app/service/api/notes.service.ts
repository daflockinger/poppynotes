/**
 * PoppyNotes Note API
 * PoppyNotes Note API
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs/Observable';

import { CompleteNote } from '../model/completeNote';
import { CreateNote } from '../model/createNote';
import { OverviewNote } from '../model/overviewNote';
import { UpdateNote } from '../model/updateNote';

import { Configuration } from '../configuration';
import { PinNote } from 'src/app/service';


@Injectable()
export class NotesService {

  protected basePath = 'http://localhost:8001';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() configuration: Configuration) {
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
      const form = 'multipart/form-data';
      for (const consume of consumes) {
          if (form === consume) {
              return true;
          }
      }
      return false;
  }


  /**
   * Create Note
   * Creates new Note entry.
   * @param noteCreate
   * @param userId Unique Identifier of the User requesting his notes.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createNote(noteCreate: CreateNote, userId: string, observe?: 'body', reportProgress?: boolean): Observable<CompleteNote>;
  public createNote(noteCreate: CreateNote, userId: string,
    observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompleteNote>>;
  public createNote(noteCreate: CreateNote, userId: string,
    observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompleteNote>>;
  public createNote(noteCreate: CreateNote, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (noteCreate === null || noteCreate === undefined) {
          throw new Error('Required parameter noteCreate was null or undefined when calling createNote.');
      }
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling createNote.');
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];
      const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
      if (httpContentTypeSelected !== undefined) {
          headers = headers.set('Content-Type', httpContentTypeSelected);
      }

      return this.httpClient.post<CompleteNote>(`${this.basePath}/api/v1/notes`,
          noteCreate,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Get Note
   * Fetches Note with defined Id.
   * @param noteId Unique identifier of a Note.
   * @param userId Unique Identifier of the User requesting his notes.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public findNote(noteId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<CompleteNote>;
  public findNote(noteId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CompleteNote>>;
  public findNote(noteId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CompleteNote>>;
  public findNote(noteId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (noteId === null || noteId === undefined) {
          throw new Error('Required parameter noteId was null or undefined when calling findNote.');
      }
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling findNote.');
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];

      return this.httpClient.get<CompleteNote>(`${this.basePath}/api/v1/notes/${encodeURIComponent(String(noteId))}`,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Get All Notes from user
   * Returns all Notes in a shorter form from a user, paginated.
   * @param userId Unique Identifier of the User requesting his notes.
   * @param page Page of notes that&#39;s beeing returned.
   * @param items Amount of notes per page.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getNotes(userId: string, page?: number, items?: number,
    observe?: 'body', reportProgress?: boolean): Observable<Array<OverviewNote>>;
  public getNotes(userId: string, page?: number, items?: number,
    observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OverviewNote>>>;
  public getNotes(userId: string, page?: number, items?: number,
    observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OverviewNote>>>;
  public getNotes(userId: string, page?: number, items?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling getNotes.');
      }

      let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
      if (page !== undefined) {
          queryParameters = queryParameters.set('page', <any>page);
      }
      if (items !== undefined) {
          queryParameters = queryParameters.set('items', <any>items);
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];

      return this.httpClient.get<Array<OverviewNote>>(`${this.basePath}/api/v1/notes`,
          {
              params: queryParameters,
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Pin Note
   * Pin a Note.
   * @param pinNote
   * @param userId Unique Identifier of the User requesting his notes.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public pinNote(pinNote: PinNote, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public pinNote(pinNote: PinNote, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public pinNote(pinNote: PinNote, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public pinNote(pinNote: PinNote, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (pinNote === null || pinNote === undefined) {
          throw new Error('Required parameter pinNote was null or undefined when calling pinNote.');
      }
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling pinNote.');
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];
      const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
      if (httpContentTypeSelected !== undefined) {
          headers = headers.set('Content-Type', httpContentTypeSelected);
      }

      return this.httpClient.put<any>(`${this.basePath}/api/v1/notes/pin`,
          pinNote,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Delete Note
   * Deletes a Note with defined Id.
   * @param noteId Unique identifier of a Note.
   * @param userId Unique Identifier of the User requesting his notes.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public removeNote(noteId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public removeNote(noteId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public removeNote(noteId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public removeNote(noteId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (noteId === null || noteId === undefined) {
          throw new Error('Required parameter noteId was null or undefined when calling removeNote.');
      }
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling removeNote.');
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];

      return this.httpClient.delete<any>(`${this.basePath}/api/v1/notes/${encodeURIComponent(String(noteId))}`,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

  /**
   * Update Note
   * Updated a Note entry.
   * @param noteUpdate
   * @param userId Unique Identifier of the User requesting his notes.
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateNote(noteUpdate: UpdateNote, userId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public updateNote(noteUpdate: UpdateNote, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public updateNote(noteUpdate: UpdateNote, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public updateNote(noteUpdate: UpdateNote, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
      if (noteUpdate === null || noteUpdate === undefined) {
          throw new Error('Required parameter noteUpdate was null or undefined when calling updateNote.');
      }
      if (userId === null || userId === undefined) {
          throw new Error('Required parameter userId was null or undefined when calling updateNote.');
      }

      let headers = this.defaultHeaders;
      if (userId !== undefined && userId !== null) {
          headers = headers.set('userId', String(userId));
      }

      // to determine the Accept header
      const httpHeaderAccepts: string[] = [
          'application/json'
      ];
      const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
      if (httpHeaderAcceptSelected !== undefined) {
          headers = headers.set('Accept', httpHeaderAcceptSelected);
      }

      // to determine the Content-Type header
      const consumes: string[] = [
          'application/json'
      ];
      const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
      if (httpContentTypeSelected !== undefined) {
          headers = headers.set('Content-Type', httpContentTypeSelected);
      }

      return this.httpClient.put<any>(`${this.basePath}/api/v1/notes`,
          noteUpdate,
          {
              withCredentials: this.configuration.withCredentials,
              headers: headers,
              observe: observe,
              reportProgress: reportProgress
          }
      );
  }

}
